@startuml
class com.example.abstractclass.RoundedRectangle {
~ double length
~ double width
~ double arcWidth
~ double arcHeight
~ double area()
+ String toString()
~ void draw(GraphicsContext)
}


class com.example.abstractclass.Rectangle {
~ double length
~ double width
~ double area()
+ String toString()
~ void draw(GraphicsContext)
}


class com.example.abstractclass.HelloApplication {
+ void start(Stage)
+ {static} void main(String[])
}

class com.example.abstractclass.HelloController {
- Canvas canvas
- ColorPicker fillColorPicker
- ColorPicker strokeColorPicker
- Slider sizeSlider
- TextField xTextField
- TextField yTextField
- TextField shapeCount
- Button rectangleButton
- Button ellipseButton
- Button roundedRectangleButton
- Button squareButton
- Label lastShapeLabel
- GraphicsContext graphicsContext
+ void initialize()
- void drawShapes(Shape,int)
+ void Rectangle(ActionEvent)
+ void Ellipse(ActionEvent)
+ void RoundedRectangle(ActionEvent)
+ void Square(ActionEvent)
}


class com.example.abstractclass.Ellipse {
~ double radiusX
~ double radiusY
~ double area()
+ String toString()
~ void draw(GraphicsContext)
}


abstract class com.example.abstractclass.Shape {
# Color fillColor
# Color strokeColor
# double x
# double size
~ {abstract}double area()
~ {abstract}void draw(GraphicsContext)
}


class com.example.abstractclass.Square {
~ double side
~ double area()
+ String toString()
~ void draw(GraphicsContext)
}




com.example.abstractclass.Shape <|-- com.example.abstractclass.RoundedRectangle
com.example.abstractclass.Shape <|-- com.example.abstractclass.Rectangle
javafx.application.Application <|-- com.example.abstractclass.HelloApplication
com.example.abstractclass.Shape <|-- com.example.abstractclass.Ellipse
com.example.abstractclass.Shape <|-- com.example.abstractclass.Square
@enduml